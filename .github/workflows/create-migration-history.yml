name: Autogenerate Alembic Revision

on:
  push:
    branches:
      - main

jobs:
  alembic:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB:   devdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d devdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devdb


    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB:   devdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d devdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devdb

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install OS & Python dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install psycopg2-binary

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for Postgresâ€¦"
            sleep 1
          done

      - name: Bootstrap database schema & seed
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          python - << 'EOF'
          import os, pkgutil, importlib
          from sqlalchemy import create_engine
          from db_models.base_model import BaseModel_DB
          import db_models

          # 1) dynamically import all your model modules
          for _, m, _ in pkgutil.iter_modules(db_models.__path__):
              importlib.import_module(f"db_models.{m}")

          # 2) create all tables in a fresh DB
          engine = create_engine(os.environ["DATABASE_URL"])
          BaseModel_DB.metadata.create_all(bind=engine)
          EOF

      - name: Generate Alembic revision
        run: |
          alembic revision --autogenerate -m "chore(migration): auto-generated on ${{ github.sha }}"

      - name: Check for new migrations
        id: check
        run: |
          echo "::set-output name=changed::$(git status --porcelain migrations/versions)"


      - name: Commit & push migration
        if: steps.check.outputs.changed != ''
        if: steps.check.outputs.changed != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "alembot[bot]"
          git config user.name  "alembot[bot]"
          git config user.email "alembot[bot]@users.noreply.github.com"
          git add migrations/versions
          git commit -m "chore(migration): add autogenerated revision ${{ github.sha }} [skip ci]"
          git push origin HEAD:main